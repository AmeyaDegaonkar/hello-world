#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Pose
from waypoint_navigation.srv import GetWaypoints

class WayPoints(Node):

    def __init__(self):
        super().__init__('waypoints_service')
        self.srv = self.create_service(GetWaypoints, 'waypoints', self.waypoint_callback)
        self.waypoints = [ 
            #1. Ground Station to Pesticide Station 1
            [-6.9, 0.09, 32.16],#ground_station:
            [-7.0, 0.0, 30.22],#hover:
            [-7.64, 3.06, 30.22],#wp1:
            [-8.22, 6.02, 30.22],#wp2:
            [-9.11, 9.27, 31.27],#destination:
            [-9.07, 9.23, 32.57],#pickup:
            #2. Pesticide Station 1 to Block 1
            [-9.11, 9.27, 31.27],#start:
            [-5.976, 8.810, 31.27],#wp1:
            [-3.26, 8.41, 29.88],#hula_hoop_2_entry:
            [0.87, 8.18, 29.05],#hula_hoop_2_exit:
            [3.929, 7.347, 29.05],#wp2:
            [6.60, 6.62, 30.20],#block_1:
            #3, Detected infected plants
            [8.62, 8.80, 28.69],#P1C
            [4.43, -4.30, 29.74],#P2A
            #3. Block 1 to Block 2
            [6.60, 6.62, 30.20],#block_1:
            [6.7375, 3.3200, 30.6450],#wp1:
            [6.7375, 3.3200, 30.6450],#wp2:
            [7.0125, -3.5950, 31.5350],#wp3:
            [7.15, -7.00, 31.98],#block_2:
            #4. Block 2 to Pesticide Station 2
            [7.15, -7.00, 31.98],#block_2:
            [4.0, -7.62, 30.59],#wp1:
            [0.8, -8.04, 29.20],#hula_hoop_1_exit:
            [-3.26, -8.12, 29.48],#hula_hoop_1_entry:
            [-5.94, -8.36, 29.54],#wp2:
            [-8.62, -8.6, 29.6],#destination:
            #5. Return Path to Ground Station 
            [-8.62, -8.6, 29.6],#block_2:
            [-5.94, -8.36, 29.54],#wp1:
            [-3.26, -8.12, 29.48],#hula_hoop_1_entry:
            [0.8, -8.04, 29.20],#hula_hoop_1_exit:
            [-7.82, -5.55, 30.22],#wp2:
            [-7.49, -2.83, 30.22],#wp3:
            [-6.9, 0.09, 32.16]#destination:
        ]
        

    
    def waypoint_callback(self, request, response):

        if request.get_waypoints == True :
            response.waypoints.poses = [Pose() for _ in range(len(self.waypoints))]
            for i in range(len(self.waypoints)):
                response.waypoints.poses[i].position.x = self.waypoints[i][0]
                response.waypoints.poses[i].position.y = self.waypoints[i][1]
                response.waypoints.poses[i].position.z = self.waypoints[i][2]
            self.get_logger().info("Incoming request for Waypoints")
            return response

        else:
            self.get_logger().info("Request rejected")

def main():
    rclpy.init()
    waypoints = WayPoints()

    try:
        rclpy.spin(waypoints)
    except KeyboardInterrupt:
        waypoints.get_logger().info('KeyboardInterrupt, shutting down.\n')
    finally:
        waypoints.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
        
