import argparse
import cv2 as cv
import numpy as np

# Create the parser
parser = argparse.ArgumentParser(description='A script to perform ArUco marker detection.')

# Add the --image argument
parser.add_argument('--image', required=True, help='Path to the image to be used for detection.')

# Parse the arguments
args = parser.parse_args()

# Access the image path
image_path = args.image

# Read the image from the specified path


# Display the image
image = cv.imread(image_path)
cv.imshow('original',image)
def rotate(image,angle,rotPoint=None):
    (height,width) = image.shape[:2]

    if rotPoint is None:
        rotPoint = (width//2,height//2)

    rotMat = cv.getRotationMatrix2D(rotPoint,angle,1.0)
    dimensions= (width ,height)

    return cv.warpAffine(image,rotMat,dimensions)

rotated= rotate(image , -90)

gray = cv.cvtColor(rotated, cv.COLOR_BGR2GRAY)

aruco_dict = cv.aruco.getPredefinedDictionary(cv.aruco.DICT_4X4_100)
parameters = cv.aruco.DetectorParameters()

corners, ids, rejected = cv.aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

if ids is not None:
    ids = ids.flatten()
    # Sort indices by ascending id
    sorted_indices = np.argsort(ids)
    sorted_ids = ids[sorted_indices]
    sorted_corners = [corners[i] for i in sorted_indices]

    print("Detected markers in sorted order:", sorted_ids)

    # Draw detected markers in sorted order
    cv.aruco.drawDetectedMarkers(rotated, sorted_corners, sorted_ids)

    src_pts = np.array([
        sorted_corners[0][0][0],  # top-left corner of first marker
        sorted_corners[1][0][1],  # top-right corner of second marker
        sorted_corners[2][0][2],  # bottom-right corner of third marker
        sorted_corners[3][0][3],  # bottom-left corner of fourth marker
    ], dtype='float32')

    widthA = np.linalg.norm(src_pts[0] - src_pts[1])
    widthB = np.linalg.norm(src_pts[2] - src_pts[3])
    width = int(max(widthA, widthB))

    heightA = np.linalg.norm(src_pts[0] - src_pts[3])
    heightB = np.linalg.norm(src_pts[1] - src_pts[2])
    height = int(max(heightA, heightB))

    dst_pts = np.array([
        [0, 0],
        [width-1, 0],
        [width-1, height-1],
        [0, height-1]
    ], dtype='float32')

    M = cv.getPerspectiveTransform(src_pts, dst_pts)
    warped = cv.warpPerspective(rotated, M, (width, height))

   
block_1 = {
    'A': (54, 55),
    'B': (48, 110),
    'C': (50, 187),
    'D': (176, 55),
    'E': (180, 123),
    'F': (176, 181),
}

block_2 = {
    'A': (54, 55),
    'B': (48, 110),
    'C': (50, 187),
    'D': (176, 55),
    'E': (180, 123),
    'F': (176, 181),
}

# def click_event(event, x, y, flags, params):
#     if event == cv.EVENT_LBUTTONDOWN:  # Left mouse button clicked
#         print(f"Clicked coordinates: x={x}, y={y}")

Block_1 = warped[452:684, 74:306]
Block_2 = warped[452:684, 452:682]

# def click_event(event, x, y, flags, params):
#     if event == cv.EVENT_LBUTTONDOWN:  # Left click
#         hsv_value = hsv[y, x]
#         print(f'HSV value at ({x},{y}): {hsv_value}')

hsv1 = cv.cvtColor(Block_1, cv.COLOR_BGR2HSV)
hsv2 = cv.cvtColor(Block_2, cv.COLOR_BGR2HSV)

lower_value = np.array([21, 230, 75])
upper_value = np.array([23, 255, 125])


mask1 = cv.inRange(hsv1, lower_value, upper_value)
mask2 = cv.inRange(hsv2, lower_value, upper_value)

def detect_infected_plants(mask, plant_positions):
    infected_ids = []
    contours, _ = cv.findContours(mask, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    
    for cnt in contours:
        M = cv.moments(cnt)
        if M['m00'] != 0:
            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])
            nearest_id = None
            min_dist = float('inf')
            for pid, (px, py) in plant_positions.items():
                dist = (px - cx)**2 + (py - cy)**2
                if dist < min_dist:
                    min_dist = dist
                    nearest_id = pid
            infected_ids.append(nearest_id)
    return infected_ids

infected_block1 = detect_infected_plants(mask1, block_1)
infected_block2 = detect_infected_plants(mask2, block_2)

print(f"Infected Plant in BLock 1: P1{infected_block1[0]}")
print(f"Infected plant in Block 2: P2{infected_block2[0]}")

cv.imshow('Warped Image', warped)
cv.imshow('Block_1',Block_1)
cv.imshow('Block_2',Block_2)
cv.imshow("Yellow Mask1", mask1)
cv.imshow("Yellow Mask2", mask2)

# cv.setMouseCallback('Block_2', click_event)
# cv.setMouseCallback('Warped Image', click_event)

cv.waitKey(0)
cv.destroyAllWindows()
